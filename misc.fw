// vim:filetype=asciidoc expandtab spell spelllang=en

== Misc

We have glossed over many trivial details to get there, but the program would
not be complete without those.

=== Log

For such a simple tool, we merely want to display debug messages or nothing at
all, so the only implemented function is `PortiaLog.debug` and, depending on
flag `debug` is either print on stderr or does nothing:

[source,ml]
----
@O@<portiaLog.ml@>==@{@-
open Batteries

let verbose = ref false

let debug fmt =
  if !verbose then
    Printf.fprintf stderr fmt
  else
    Printf.ifprintf stderr fmt
@}
----

=== Asciidoc

Last but not least, let's provide the configuration (in the form of the
extraction functions) for asciidoc documents, both as an example and because
that's the documentation format I intend to use in the future:

[source,ml]
----
@O@<asciidoc.ml@>==@{@-
open Batteries
open PortiaParse

let exts_of_lang = function
    | "shell" | "bash" -> [ ".sh"; ".bash" ]
    | "autoconf" -> [ ".m4" ]
    | "docbook" -> [ ".xml" ]
    | "c" -> [ ".c"; ".h" ]
    | x -> [ "." ^ x ]

let find_code_definitions =
    let re = Str.regexp ("^\\.\\([^:\n]+\\)\\(:[^\n]*\\)?\n" ^
                         "\\[source,\\([^]]+\\)\\]\n" ^
                         "----\n" ^
                         "\\(\\(\\([^-\n].*\\)?\n\\)+\\)" ^
                         "----\n") in
    fold_all_groups (fun l p ->
        match l with
            | Some (id,_,_)::_::Some (lang,_,_)::Some (_def, start, stop)::_ ->
                let is_file =
                  exts_of_lang lang |>
                  List.exists (fun ext -> String.ends_with id ext)
                in
                (id, is_file, start, stop) :: p
            | _ -> assert false) [] re

(*$= find_code_definitions & ~printer:dump
  [ "Foo.ml", true, 30, 37 ] \
  (find_code_definitions \
    ".Foo.ml: bar\n\\
     [source,ml]\n\\
     ----\n\\
     glop.\n\\
     \n\\
     ----\n\\
     I'm out!\n\\
     ----\n")
 [ "Foo", false, 27, 38 ] \
 (find_code_definitions \
   ".Foo: bar\n\\
    [source,ml]\n\\
    ----\n\\
    pas glop.\n\\
    \n\\
    ----\n")
*)

let find_file_content =
    let re = Str.regexp ("^\\.Content of \\([^\n]*\\)\n" ^
                         "\\[source,[^\n]*\\]\n" ^
                         "----\n" ^
                         "\\(\\(\\([^-].*\\)?\n\\)+\\)" ^
                         "----\n") in
    fold_all_groups (fun l p ->
        match l with
            | Some (id,_,_)::Some (_def, start, stop)::_ ->
              (id, true, start, stop)::p
            | _ -> assert false) [] re

let find_definitions str =
    find_code_definitions str @@ find_file_content str

let find_references =
    let re = Str.regexp "\\((\\* \\.\\.\\.\\([^\n\\*]+\\)\\.\\.\\. \\*)\\)" in
    fold_all_groups (fun l p -> match l with
        | [ Some (_, start, stop); Some (id, _, _) ] -> (id, start, stop)::p
        | _ -> assert false) [] re

(* Note that we have to break up the comment mark in order not to
   confuse qtest. *)
(*$= find_references & ~printer:dump
  (find_references ("xx ("^"* ...Inventory.Make functor... *"^") yy")) \
    [ "Inventory.Make functor", 3, 37 ]
*)

let find_inclusions =
    let re = Str.regexp "^include::\\([^\\[\n]+\\)\\[\\([^\\[\n]*\\)\\]\n" in
    fold_all_groups (fun l p -> match l with
        | [ Some (f, _, _); _ ] -> f::p
        | _ -> p) [] re

let () =
    PortiaConfig.find_definitions := find_definitions ;
    PortiaConfig.find_references  := find_references ;
    PortiaConfig.find_inclusions  := find_inclusions ;
@}
----

Notice here `find_file_content` which allows to specify in the documentation
some content to be copied verbatim into a file. This is handy to generate files
out of band for testing fixture for instance.

The small function `ext_of_lang` tries to match languages names that are
understood by asciidoc (actually, by `GNU source-highlight`, its default source
code highlighter) back to file extension. Most of the time, though, asciidoc
also understand the file extension itself so we assume that's what's specified
in the `source` command to make this function shorter.

Notice that for `find_references` we use a format that conveniently (for OCaml
programmers) looks like OCaml comments. Since those expansion points will be
completely replaced by their definition it does not really matter and those
would of course work just as well regardless of the language used around. One
may prefer to use comments for that language in order not to confuse the
documentation generator when syntax-highlighting the code bloc. Therefore, it
would be nice to allow for more comment style here, or to pick the proper one
from another configuration file...
