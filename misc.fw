// vim:filetype=asciidoc expandtab spell spelllang=en

== Misc

We have glossed over many trivial details to get there, but the program would
not be complete without those.

=== Log

For such a simple tool, we merely want to display debug messages or nothing at
all, so the only implemented function is `PortiaLog.debug` and, depending on
flag `debug` is either print on stderr or does nothing:

[source,ml]
----
@O@<portiaLog.ml@>==@{@-
open Batteries

let verbose = ref false

let debug fmt =
  if !verbose then
    Printf.fprintf stderr fmt
  else
    Printf.ifprintf stderr fmt
@}
----

=== Asciidoc

Last but not least, let's provide the configuration (in the form of the
extraction functions) for asciidoc documents, both as an example and because
that's the documentation format I intend to use in the future:

[source,ml]
----
@O@<asciidoc.ml@>==@{@-
open Batteries
open PortiaParse

let find_ml_definitions =
    let re = Str.regexp "^\\.\\([^:\n]+\\)\\(:[^\n]*\\)?\n\\[source,ml\\]\n----\n\\(\\(\\([^-\n].*\\)?\n\\)+\\)----\n" in
    fold_all_groups (fun l p ->
        match l with
            | Some (id,_,_)::Some _::Some (_def, start, stop)::_ ->
                (id ^ ".ml", true, start, stop)::p
            | Some (id,_,_)::None::Some (_def, start, stop)::_ ->
                (id, false, start, stop)::p
            | _ -> assert false) [] re

let find_file_content =
    let re = Str.regexp "^\\.Content of \\([^\n]*\\)\n\\[source,[^\n]*\\]\n----\n\\(\\(\\([^-].*\\)?\n\\)+\\)----\n" in
    fold_all_groups (fun l p ->
        match l with
            | Some (id,_,_)::Some (_def, start, stop)::_ ->
              (id, true, start, stop)::p
            | _ -> assert false) [] re

let find_definitions str =
    find_ml_definitions str @ find_file_content str

let find_references =
    let re = Str.regexp "\\((\\* \\.\\.\\.\\([^\n\\*]+\\)\\.\\.\\. \\*)\\)" in
    fold_all_groups (fun l p -> match l with
        | [ Some (_, start, stop); Some (id, _, _) ] -> (id, start, stop)::p
        | _ -> assert false) [] re

let find_inclusions =
    let re = Str.regexp "^include::\\([^\\[\n]+\\)\\[\\([^\\[\n]*\\)\\]\n" in
    fold_all_groups (fun l p -> match l with
        | [ Some (f, _, _); _ ] -> f::p
        | _ -> p) [] re

let () =
    PortiaConfig.find_definitions := find_definitions ;
    PortiaConfig.find_references  := find_references ;
    PortiaConfig.find_inclusions  := find_inclusions ;
@}
----

Notice here `find_file_content` which allows to specify in the documentation
some content to be copied verbatim into a file. This is handy to generate files
out of band for testing fixture for instance.

