// vim:filetype=asciidoc expandtab spell spelllang=en

== Overview

For generating source code (remember R4: we do not have to generate the doc),
we need a few directives:

- define and name a block of code (see R5)
- reference a block of code by name (from another block of code or from the
  literate text)
- define and output to a file a block of code
- add a file to the list of processed files (see R9)

We are going to use the http://ocaml.org[OCaml language] because it's
compendious yet fast.

The program basically reads its configuration file (or load its compiled
configuration file), then proceed with reading the given file, building a
dictionary of block definitions and loading additional files along the way,
keeping track of code blocks definitions and modification time of the used
files, and checking everything.

Then it outputs the code, rereading the files to fetch code blocks so that we
do not have to hold in memory a quantity of information equivalent of the
resulting source code.

So the basic skeleton, given a set of configuration files `plugins` and a list
of source files to proceed `srcfiles`, looks like:

[source,ml]
----
@$@<Skeleton@>==@{
List.iter (load_lib !libdir) !plugins ;
List.iter PortiaParse.parse !srcfiles ;
Output.all ()
@}
----

Notice that configuration does not appear here, nor does harvested definitions.
They lies in global variables, which suits this short lived program just fine.
We won't worry about configuration parameters yet. Suffice to say that all of
these global parameters, regular expressions and functions (remember some
filters may be functions) are references defined in a module unambiguously
named `Config`.

By loading a conf, we merely want to load a compiled .cmo file:

[source,ml]
----
@$@<ConfigLoad@>==@{@-
let load_lib libdir fname =
    let libname = libdir ^"/"^ fname ^".cmo" in
    PortiaLog.debug "loading lib %s\n" libname ;
    Dynlink.(loadfile (adapt_filename libname))
@}
----

This is enough for a user to choose between several plugins (funnelweb, ...).

So we only need this entry point to parse command line arguments and we are
done with the boring work:

[source,ml]
----
@$@<EntryPoint@>==@{@-
let main =
    let plugins = ref [] in
    let libdir = ref "@PLUGINDIR@" in
    let srcfiles = ref [] in
    let addlst l s = l := s :: !l in
    Arg.(parse
        [ "-syntax", String (addlst plugins),
                     "Name of the plugin to use for parsing files \
                      (default to funnelweb)" ;
          "-libdir", Set_string libdir,
                     "Where to read plugins from" ;
          "-ignore-missing", Set PortiaDefinition.ignore_missing,
                     "Referenced  but never defined blocks are not \
                      an error" ;
          "-debug",  Set PortiaLog.verbose,
                     "Output debug messages" ]
        (addlst srcfiles)
        "portia - literate programming preprocessor\n\
         \n\
         portia [options] files...\n\
         Will output source code from given files.\n") ;
    if !plugins = [] then addlst plugins "funnelweb" ; (* default syntax *)
    @<Skeleton@>
@}
----

So we have the Main module (linked last):

----
@O@<main.ml@>==@{@-
open Batteries

@<ConfigLoad@>
@<EntryPoint@>
@}
----

Let's focus now on our main data type, the code block definition.

