// vim:filetype=asciidoc expandtab spell spelllang=en

== Code block definitions

It is well known that naming things is the most difficult part in programming.
This has to do with the fact that a large part of programming consists in
inventing many simple but abstract concepts with no counterpart in actual life
or pre-existing abstractions from other intellectual fields.  Sometime we can
borrow a term or two from mathematics but mostly we have to give names to
things that are relevant only to our program, maybe not even for its full
lifetime.

So we have to repeatedly look for designations close enough to what we actually
mean that, with enough context, it will become clear what concept they refer
to.  Of course, this context is not easy to acquire without prior knowledge of
these somewhat arbitrary definitions, so it takes some time and effort to pull
oneself out of this catch-22 situation.

So, after this short introduction have hopefully inclined my reader to
leniency, let's ask ourself what the name of a program fragment should be.
Shall we keep calling it a "program fragment"? But this implies that this is
part of a program, which is not required. Should it be an "extract", considered
this fragment is separated from the rest for display purpose?  Or a "phrase",
considered it's part of a larger "discourse" (the program)?

Or, if we forget what we manipulate to consider how we manipulate it,
should it be called a "macro body"? Merely a "macro" or "body"? Or a
"definition"?  This point of view is seducing since it makes our program a more
general purpose text processor rather than a specialized tool for literate
programming (of course a type or variable name is not really part of the
running program and so cannot alter its behavior in any way, but I believe in
the power of names to influence our reasoning about abstractions and that
giving generic names help building generic programs).

Let's call these code fragments "definitions", then.

What information is there in a definition?
We have already seen that we need its location used both for error reporting
(file name, line number and column) and for fetching it quickly on demand
(offset and size in bytes).

Also note the recording of the mtime so that we can tell, when fetching the
body, that the file have not changed since we collected this definition.

[source,ml]
----
@$@<Location@>==@{@-
type location = { file : string ;
                 mtime : float ;
                lineno : int ;
                 colno : int ;
                offset : int ;
                  size : int }@}
----

with the convenient convention that line and column numbers are actually offset
from the start, thus start at 0, which allows us to add them naturally.

Rather than having a single location, we want to allow for a definition to be
split across many locations (the body of the definition is then the
concatenation of all fragment in order of appearance - which is specified by
the depth first exploration of included files, the ordering of files in command
line and finally the order we met definitions in a given file)

* an identifier (unique for the file its located in) which can be any string:

[source,ml]
----
@$@<DefName@>==@{type id = string@}
----

* a flag to tell us if this definition is supposed to be output in a file,
  with two consequences:
** of course, the expanded body of this definition will be written into a
   file (which name will be the identifier);
** and you are not allowed to refer to this definition from another one.

The user should be warned about any code fragment that is not, directly or
indirectly, referenced from an output definition.

[source,ml]
----
@$@<DefinitionType@>==@{@-
@<Location@>
@<DefName@>
type t = { locs : location list ; (* reverse order *)
             id : id ;
         output : bool }
@}
----

Notice that it's possible that there is no location at all (empty list),
meaning the definition was missing (might be conveniently allowed with
+ignore_missing+ flag, to make it possible to generate a valid program and
write the extensions later on).

It's always a good idea to write proper printers for any new type. This may
looks fastidious but you are actually doing yourself a favor: better have these
printers ready before they are needed than to have to write them quickly while
struggling with a bug. Especially when using Batteries which make writing and
using such printers so easy.

So here they are:

[source,ml]
----
@$@<Definitions@>+=@{@-
let location_print fmt loc =
    Printf.fprintf fmt "%s:%d.%d-%d"
        loc.file loc.lineno loc.colno (loc.colno+loc.size)

let mtime_print = Float.print (* TODO: user friendly date&time? *)

let rec locations_print fmt = function
    | [] -> Printf.fprintf fmt "undefined"
    | [loc] -> location_print fmt loc
    | _loc::locs' ->
        locations_print fmt locs' (* print only the first location *)

let print fmt t =
    Printf.fprintf fmt "%s@@%a" t.id locations_print t.locs
@}
----

Now obviously we also want to fetch a definition body from its file (checking
mtime):

[source,ml]
----
@$@<Definitions@>+=@{@-
exception FileChanged of string
let fetch_loc loc =
    let open Unix in
    let fname = loc.file in
    if (stat fname).st_mtime > loc.mtime then
        raise (FileChanged fname) ;
    read_file fname loc.offset loc.size
@}
----

Then, we will need a way to add definitions to a global registry, and the
associated lookup function. Definitions are created from a file, offset and
length (line number and column number are not given and will be computed when
registering, so that plugins author work is limited to the minimum) and of
course the identifier for the definition.

[source,ml]
----
@$@<Definitions@>+=@{@-

let ignore_missing = ref false

let registry = Hashtbl.create 31

let add id output fname off sz =
    let loc = location_in_file fname off sz in
    PortiaLog.debug "Add definition for %s at position %a\n"
        id location_print loc ;
    Hashtbl.modify_opt id (function
        | None   -> Some { id ; output ; locs = [loc] }
        | Some t -> Some { t with locs = loc :: t.locs })
        registry

let lookup id =
    try Hashtbl.find registry id
    with Not_found ->
        if !ignore_missing then { id ; output = false ; locs = [] }
        else (
            Printf.fprintf stderr "Cannot find definition for '%s'\n" id ;
            exit 1
        )
@}
----

Where location_in_file is responsible to return a correct location
(up to proper line and column numbers) from the file name, offset
and size:

[source,ml]
----
@$@<LocationInFile@>==@{@-
let location_in_file file offset size =
    let mtime = Unix.((stat file).st_mtime) in
    let txt = read_file file 0 offset in
    let colno = colno_at txt
    and lineno = lineno_at offset txt in
    { file ; offset ; size ; mtime ; lineno ; colno }
@}
----

Now the last part: expansion. Given a function PortiaConfig.find_references
(supplied by the configuration) that's able to spot all expansion points from a
non expanded body, and the registry of all known definitions, let's build a
function that will return the complete expanded body (or signal a problem).

[source,ml]
----
@$@<Definitions@>+=@{@-

let linenum lineno file =
  let txt = !PortiaConfig.linenum lineno file in
  if txt = "" then "" else "\n" ^ txt ^ "\n"

let rec expanded_loc loc =
    let unexpanded = fetch_loc loc in
    PortiaLog.debug "expand '%s'\n" unexpanded ;
    (* Start with line number information. *)
    let txt = linenum loc.lineno loc.file in
    (* find_references returns a list of (id, start_offset, stop_offset) *)
    let refs = !PortiaConfig.find_references unexpanded |>
               List.sort (fun (_,o1,_) (_,o2,_) -> compare o1 o2) in
    PortiaLog.debug "found references: %a\n"
        (List.print (Tuple3.print String.print Int.print Int.print)) refs ;
    let txt, last_stop =
        List.fold_left (fun (txt,last_stop) (id,start,stop) ->
            assert (start >= last_stop) ;
            let txt = txt ^
                      (String.sub unexpanded last_stop
                                  (start - last_stop)) in
            PortiaLog.debug "appended '%s'\n"
                (String.sub unexpanded last_stop (start - last_stop)) ;

            let t' = lookup id in
            let body = expanded_body t' in
            let txt = txt ^ body in

            (* add a linenum indication that we are back in this block *)
            let txt = txt ^
                      linenum
                          (loc.lineno + (lineno_at stop unexpanded))
                          loc.file in
            txt, stop)
            (txt, 0) refs in
    (* Complete with what's left *)
    let rest = String.length unexpanded - last_stop in
    txt ^ String.sub unexpanded last_stop rest

and expanded_body t =
    List.rev t.locs |>
    List.map expanded_loc |>
    String.concat ""
@}
----

We must now complete this module with the functions we used up to here for
helping dealing with text files and locations:

[source,ml]
----
@$@<TxtHelpers@>==@{@-
(* first char is at column 0 *)
let colno_at txt =
    let rec aux colno p =
        if p = 0 || txt.[p-1] = '\n' then colno else
        aux (colno+1) (p-1) in
    aux 0 (String.length txt)

(* first line is 0 *)
let lineno_at pos txt =
    let rec aux p n =
        if p >= pos then n else
        aux (p+1) (if txt.[p] = '\n' then n+1 else n) in
    aux 0 0

let read_file fname offset size =
    let open Unix in
    let fd = openfile fname [O_RDONLY] 0 in
    lseek fd offset SEEK_SET |> ignore ;
    let str = Bytes.create size in
    let rec read_chunk prev =
        if prev < size then
            let act_sz = read fd str prev (size-prev) in
            read_chunk (prev + act_sz) in
    read_chunk 0 ;
    close fd ;
    Bytes.to_string str
@}
----

Regarding linenum, this function depends on the programming language
used. The default implementation from Config will not output linenum
directives. But dedicated plugins are easy to write. First, for
ocaml:

[source,ml]
----
@O@<ocaml.ml@>==@{@-
let linenum lineno fname =
    Printf.sprintf "# %d \"%s\"" (lineno+1) fname

let () = PortiaConfig.linenum := linenum
@}
----

and for C:

[source,ml]
----
@O@<c.ml@>==@{@-
let linenum lineno fname =
    Printf.sprintf "#line %d \"%s\"" (lineno+1) fname

let () = PortiaConfig.linenum := linenum
@}
----

Notice that those directives follow the GNU convention that:

  Line numbers should start from 1 at the beginning of the file, and column
  numbers should start from 1 at the beginning of the line.

One more word about the linenum directive in OCaml. It is documented in the
chapter 6.1 (lexical conventions) of the OCaml manual, and from this
documentation it appears that it is not constrained to appear alone on a line.
We do make some effort to place these directives on dedicated lines, in order
to generate better looking source files.

Also, notice that we must insert a linenum directive at the insertion point of
each definition body and after each expansion to return to previous location.

With these functions we are now ready to start the real job of parsing input
files(s) and writing output definitions.

[source,ml]
----
@O@<portiaDefinition.ml@>==@{@-
open Batteries

@<DefinitionType@>
@<TxtHelpers@>
@<LocationInFile@>
@<Definitions@>
@}
----
