// vim:filetype=asciidoc expandtab spell spelllang=en

= Portia: a text processor for literate programs
:toc:
:icons:
:numbered:
:website: http://github.com/rixed/portia

== What's literate programming?

http://en.wikipedia.org/wiki/Literate_programming[better ask Wikipedia]

== Why another preprocessor?

Because no literate programming preprocessor allows any document language
and any programming language. I, for one, like to embed fragments of OCaml in
asciidoc files.

Here are the requirements and short rationals:

R1. Must be able to build itself

That's the fun part.

R2. Must be bootstrapable with funnelweb

Because funnelweb is quite usable. Especially, it is agnostic with regard to
the programming language and almost so regarding the documentation language.

It follows from these requirements that we should either follow funnelweb
syntax, which is ugly, or build a tool that's flexible enough to act like
funnelweb (or at least, that can understand a workable subset of funnelweb
syntax).

Ideally, all escaping sequences of the macro system can be redefined.
When bootstrapping (with the actual funnelweb) we do not mind the quality of
the generated documentation since we can produce a better documentation (and
source code, thanks to requirement R3 & R4) from recompiling with the
bootstrapped processor.

R3. Add correct file and line number informations into generated source code

Whatever the programming language that's being used of course.

R4. Do not output doc; rather, make code extraction flexible enough for the doc
    to be written in any documentation language in the first place

The documentation being the important part, do not interfere with it.

R5. Code blocks may be inline

Like short mathematical formulas are better inline.

R6. Must not require to have all the text, nor all the code, present in memory

Funnelweb builds a whole source code representation in memory before outputing
anything. This is frightening. Despite I've never used literate style for
anything but trivial program I believe the technique suits huge programs just
as well.

R7. Can split content into several files

Quite obvious.

R8. Named code fragments may be defined from several places (even in different
    files)

In literate programming, the human reader must remember the main names used by
the program as well as the names used to reference important code fragments.
In order to limit the number of unessential definitions, Funnelweb allows to
build a macro definition incrementally so that you must not introduce temporary
names just to insert commentary in between two related code fragments.

R9. Support an include directive

Since we do not care about the order in which the code fragments will be
encountered, and we do not care neither in what order we scan the documentation
(since we do not produce a documentation according to R4), then we can merely be
given a list of files to scan from the command line. We do not need an include
directive as funnelweb (and other) does.

Still, many documentation language has an include directive and if we were able
to follow it then we could alleviate the user from the need to maintain this
list of files (since we could find everything from the root document).

So we do both: we will scan everything from the command line and additionally,
if we are taught how to spot an include directive, then we will try to follow
it.

////
Here we must hide funnelweb include directives:

@i main.fw
@i definitions.fw
@i parsing.fw
@i output.fw
@i config.fw
@i misc.fw
////

include::main.fw[]
include::definitions.fw[]
include::parsing.fw[]
include::output.fw[]
include::config.fw[]
include::misc.fw[]

== TODO

Do not change the +ctime+ of a generated file when the content is the same.
This is to avoid Makefile rebuilding unnecessary files.  Can be done by first
generating into a temp file and then comparing the sizes and content of the
file.  May be guarded by an option?

Indenting the generated source code makes column positions reported by
compilers (and other tools such as annot for OCaml) different from the one in
the source document, which somewhat defeats the line number information
feature. Therefore it should be possible to disable indentation altogether for
more accurate position reporting.

